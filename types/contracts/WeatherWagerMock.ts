/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace WeatherWagerMock {
  export type ForecastTicketStruct = {
    cityId: BigNumberish;
    bettor: AddressLike;
    condition: BigNumberish;
    stake: BigNumberish;
    commitment: BytesLike;
    claimed: boolean;
  };

  export type ForecastTicketStructOutput = [
    cityId: bigint,
    bettor: string,
    condition: bigint,
    stake: bigint,
    commitment: string,
    claimed: boolean
  ] & {
    cityId: bigint;
    bettor: string;
    condition: bigint;
    stake: bigint;
    commitment: string;
    claimed: boolean;
  };
}

export interface WeatherWagerMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "MARKET_ROLE"
      | "MAX_CONDITIONS"
      | "ORACLE_ROLE"
      | "cityTickets"
      | "commitmentUsed"
      | "createCityMarket"
      | "getCityMarket"
      | "getRoleAdmin"
      | "getTicket"
      | "getTicketsForCity"
      | "grantRole"
      | "hasRole"
      | "markets"
      | "placeForecast"
      | "protocolId"
      | "renounceRole"
      | "requestClaim"
      | "revokeRole"
      | "settleCity"
      | "supportsInterface"
      | "ticketCount"
      | "tickets"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CityMarketCreated"
      | "CitySettled"
      | "ForecastPaid"
      | "ForecastPlaced"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MARKET_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_CONDITIONS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ORACLE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cityTickets",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commitmentUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createCityMarket",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCityMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicketsForCity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "markets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "placeForecast",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestClaim",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleCity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ticketCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tickets",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MARKET_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_CONDITIONS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ORACLE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cityTickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitmentUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCityMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCityMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicketsForCity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "markets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "placeForecast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settleCity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ticketCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tickets", data: BytesLike): Result;
}

export namespace CityMarketCreatedEvent {
  export type InputTuple = [cityId: BigNumberish, lockTimestamp: BigNumberish];
  export type OutputTuple = [cityId: bigint, lockTimestamp: bigint];
  export interface OutputObject {
    cityId: bigint;
    lockTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CitySettledEvent {
  export type InputTuple = [
    cityId: BigNumberish,
    winningCondition: BigNumberish,
    payoutRatio: BigNumberish
  ];
  export type OutputTuple = [
    cityId: bigint,
    winningCondition: bigint,
    payoutRatio: bigint
  ];
  export interface OutputObject {
    cityId: bigint;
    winningCondition: bigint;
    payoutRatio: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForecastPaidEvent {
  export type InputTuple = [
    ticketId: BigNumberish,
    bettor: AddressLike,
    payoutWei: BigNumberish
  ];
  export type OutputTuple = [
    ticketId: bigint,
    bettor: string,
    payoutWei: bigint
  ];
  export interface OutputObject {
    ticketId: bigint;
    bettor: string;
    payoutWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForecastPlacedEvent {
  export type InputTuple = [
    cityId: BigNumberish,
    bettor: AddressLike,
    ticketId: BigNumberish
  ];
  export type OutputTuple = [cityId: bigint, bettor: string, ticketId: bigint];
  export interface OutputObject {
    cityId: bigint;
    bettor: string;
    ticketId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WeatherWagerMock extends BaseContract {
  connect(runner?: ContractRunner | null): WeatherWagerMock;
  waitForDeployment(): Promise<this>;

  interface: WeatherWagerMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MARKET_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_CONDITIONS: TypedContractMethod<[], [bigint], "view">;

  ORACLE_ROLE: TypedContractMethod<[], [string], "view">;

  cityTickets: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  commitmentUsed: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  createCityMarket: TypedContractMethod<
    [
      cityId: BigNumberish,
      conditionCount: BigNumberish,
      lockTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getCityMarket: TypedContractMethod<
    [cityId: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        exists: boolean;
        conditionCount: bigint;
        lockTimestamp: bigint;
        settled: boolean;
        winningCondition: bigint;
        payoutRatio: bigint;
        totalDepositedWei: bigint;
        totalPaidWei: bigint;
        gatewayRequestId: bigint;
        winningTotalScaled: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTicket: TypedContractMethod<
    [ticketId: BigNumberish],
    [WeatherWagerMock.ForecastTicketStructOutput],
    "view"
  >;

  getTicketsForCity: TypedContractMethod<
    [cityId: BigNumberish],
    [bigint[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  markets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        exists: boolean;
        conditionCount: bigint;
        lockTimestamp: bigint;
        settled: boolean;
        winningCondition: bigint;
        payoutRatio: bigint;
        totalPool: bigint;
        totalDepositedWei: bigint;
        totalPaidWei: bigint;
      }
    ],
    "view"
  >;

  placeForecast: TypedContractMethod<
    [
      cityId: BigNumberish,
      arg1: BytesLike,
      arg2: BytesLike,
      arg3: BytesLike,
      commitment: BytesLike
    ],
    [bigint],
    "payable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  requestClaim: TypedContractMethod<
    [ticketId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  settleCity: TypedContractMethod<
    [cityId: BigNumberish, winningCondition: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  ticketCount: TypedContractMethod<[], [bigint], "view">;

  tickets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, boolean] & {
        cityId: bigint;
        bettor: string;
        condition: bigint;
        stake: bigint;
        commitment: string;
        claimed: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MARKET_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_CONDITIONS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ORACLE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "cityTickets"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "commitmentUsed"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createCityMarket"
  ): TypedContractMethod<
    [
      cityId: BigNumberish,
      conditionCount: BigNumberish,
      lockTimestamp: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCityMarket"
  ): TypedContractMethod<
    [cityId: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        exists: boolean;
        conditionCount: bigint;
        lockTimestamp: bigint;
        settled: boolean;
        winningCondition: bigint;
        payoutRatio: bigint;
        totalDepositedWei: bigint;
        totalPaidWei: bigint;
        gatewayRequestId: bigint;
        winningTotalScaled: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTicket"
  ): TypedContractMethod<
    [ticketId: BigNumberish],
    [WeatherWagerMock.ForecastTicketStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTicketsForCity"
  ): TypedContractMethod<[cityId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "markets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        boolean,
        bigint,
        bigint,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        exists: boolean;
        conditionCount: bigint;
        lockTimestamp: bigint;
        settled: boolean;
        winningCondition: bigint;
        payoutRatio: bigint;
        totalPool: bigint;
        totalDepositedWei: bigint;
        totalPaidWei: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "placeForecast"
  ): TypedContractMethod<
    [
      cityId: BigNumberish,
      arg1: BytesLike,
      arg2: BytesLike,
      arg3: BytesLike,
      commitment: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestClaim"
  ): TypedContractMethod<[ticketId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleCity"
  ): TypedContractMethod<
    [cityId: BigNumberish, winningCondition: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "ticketCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tickets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, string, boolean] & {
        cityId: bigint;
        bettor: string;
        condition: bigint;
        stake: bigint;
        commitment: string;
        claimed: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "CityMarketCreated"
  ): TypedContractEvent<
    CityMarketCreatedEvent.InputTuple,
    CityMarketCreatedEvent.OutputTuple,
    CityMarketCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CitySettled"
  ): TypedContractEvent<
    CitySettledEvent.InputTuple,
    CitySettledEvent.OutputTuple,
    CitySettledEvent.OutputObject
  >;
  getEvent(
    key: "ForecastPaid"
  ): TypedContractEvent<
    ForecastPaidEvent.InputTuple,
    ForecastPaidEvent.OutputTuple,
    ForecastPaidEvent.OutputObject
  >;
  getEvent(
    key: "ForecastPlaced"
  ): TypedContractEvent<
    ForecastPlacedEvent.InputTuple,
    ForecastPlacedEvent.OutputTuple,
    ForecastPlacedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;

  filters: {
    "CityMarketCreated(uint256,uint256)": TypedContractEvent<
      CityMarketCreatedEvent.InputTuple,
      CityMarketCreatedEvent.OutputTuple,
      CityMarketCreatedEvent.OutputObject
    >;
    CityMarketCreated: TypedContractEvent<
      CityMarketCreatedEvent.InputTuple,
      CityMarketCreatedEvent.OutputTuple,
      CityMarketCreatedEvent.OutputObject
    >;

    "CitySettled(uint256,uint8,uint64)": TypedContractEvent<
      CitySettledEvent.InputTuple,
      CitySettledEvent.OutputTuple,
      CitySettledEvent.OutputObject
    >;
    CitySettled: TypedContractEvent<
      CitySettledEvent.InputTuple,
      CitySettledEvent.OutputTuple,
      CitySettledEvent.OutputObject
    >;

    "ForecastPaid(uint256,address,uint256)": TypedContractEvent<
      ForecastPaidEvent.InputTuple,
      ForecastPaidEvent.OutputTuple,
      ForecastPaidEvent.OutputObject
    >;
    ForecastPaid: TypedContractEvent<
      ForecastPaidEvent.InputTuple,
      ForecastPaidEvent.OutputTuple,
      ForecastPaidEvent.OutputObject
    >;

    "ForecastPlaced(uint256,address,uint256)": TypedContractEvent<
      ForecastPlacedEvent.InputTuple,
      ForecastPlacedEvent.OutputTuple,
      ForecastPlacedEvent.OutputObject
    >;
    ForecastPlaced: TypedContractEvent<
      ForecastPlacedEvent.InputTuple,
      ForecastPlacedEvent.OutputTuple,
      ForecastPlacedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
  };
}
