/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  EthereumConfig,
  EthereumConfigInterface,
} from "../../../../../@fhevm/solidity/config/ZamaConfig.sol/EthereumConfig";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "protocolId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052346100f65760606100136100fb565b6000918183809352826020820152826040820152015260606100336100fb565b828152826020820152826040820152015260018060a01b03197f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497008181541690557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497018181541690557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e46497028181541690557f9e7b61f58c47dc699ac88507c4f5bb9f121c03808c5676a8078fe583e4649703908154169055604051607990816101318239f35b600080fd5b60405190608082016001600160401b0381118382101761011a57604052565b634e487b7160e01b600052604160045260246000fdfe6080806040526004361015601257600080fd5b600090813560e01c63da1f12ab14602857600080fd5b34603f5781600319360112603f5780600160209252f35b5080fdfea2646970667358221220b628677ebac8c91bb508e8b93082857811b16c0eb97ece2c2bd8f3ef6088e69464736f6c63430008180033";

type EthereumConfigConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EthereumConfigConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EthereumConfig__factory extends ContractFactory {
  constructor(...args: EthereumConfigConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EthereumConfig & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EthereumConfig__factory {
    return super.connect(runner) as EthereumConfig__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EthereumConfigInterface {
    return new Interface(_abi) as EthereumConfigInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EthereumConfig {
    return new Contract(address, _abi, runner) as unknown as EthereumConfig;
  }
}
